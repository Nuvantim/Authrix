// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: client.sql

package repository

import (
	"context"
)

const AllRoleClient = `-- name: AllRoleClient :many
SELECT
    r.id,
    r.name,
    COALESCE(
        (
            SELECT jsonb_agg(
                jsonb_build_object(
                    'id', p.id,
                    'name', p.name
                )
                ORDER BY p.name
            )
            FROM public.permission AS p
            LEFT JOIN public.role_permission AS rp ON p.id = rp.id_permission
            WHERE rp.id_role = r.id
        ),
        '[]'::jsonb
    ) AS permissions
FROM
    public.role AS r
WHERE
    r.id IN (SELECT id_role FROM user_role WHERE id_user = $1)
GROUP BY
    r.id, r.name
ORDER BY
    r.name
`

type AllRoleClientRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Permissions interface{} `json:"permissions"`
}

func (q *Queries) AllRoleClient(ctx context.Context, idUser int32) ([]AllRoleClientRow, error) {
	rows, err := q.db.Query(ctx, AllRoleClient, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AllRoleClientRow{}
	for rows.Next() {
		var i AllRoleClientRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const CreateRoleClient = `-- name: CreateRoleClient :exec
INSERT INTO user_role (id_user, id_role) SELECT $1 AS user_id_params,
unnested_role_id FROM UNNEST($2::int[]) AS unnested_role_id
`

type CreateRoleClientParams struct {
	IDUser  int32   `json:"id_user"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) CreateRoleClient(ctx context.Context, arg CreateRoleClientParams) error {
	_, err := q.db.Exec(ctx, CreateRoleClient, arg.IDUser, arg.Column2)
	return err
}

const DeleteClient = `-- name: DeleteClient :exec
DELETE FROM user_account WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteClient, id)
	return err
}

const DeleteRoleClient = `-- name: DeleteRoleClient :exec
DELETE FROM user_role WHERE id_user = $1
`

func (q *Queries) DeleteRoleClient(ctx context.Context, idUser int32) error {
	_, err := q.db.Exec(ctx, DeleteRoleClient, idUser)
	return err
}

const GetClient = `-- name: GetClient :one
SELECT id,name,email FROM user_account WHERE id = $1
`

type GetClientRow struct {
	ID    int32  `json:"id" validate:"required"`
	Name  string `json:"name" validate:"required"`
	Email string `json:"email" validate:"required"`
}

func (q *Queries) GetClient(ctx context.Context, id int32) (GetClientRow, error) {
	row := q.db.QueryRow(ctx, GetClient, id)
	var i GetClientRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const GetRoleClient = `-- name: GetRoleClient :many
SELECT id,name FROM role WHERE id IN (SELECT id_role FROM user_role WHERE id_user = $1)
`

type GetRoleClientRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRoleClient(ctx context.Context, idUser int32) ([]GetRoleClientRow, error) {
	rows, err := q.db.Query(ctx, GetRoleClient, idUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRoleClientRow{}
	for rows.Next() {
		var i GetRoleClientRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListClient = `-- name: ListClient :many
SELECT
    u.id,
    u.name,
    u.email,
    ARRAY_AGG(r.name ORDER BY r.name) FILTER (WHERE r.name IS NOT NULL) AS role
FROM
    public.user_account AS u
LEFT JOIN
    public.user_role AS ur ON u.id = ur.id_user
LEFT JOIN
    public.role AS r ON ur.id_role = r.id
GROUP BY
    u.id, u.name, u.email
ORDER BY
    u.name
`

type ListClientRow struct {
	ID    int32       `json:"id" validate:"required"`
	Name  string      `json:"name" validate:"required"`
	Email string      `json:"email" validate:"required"`
	Role  interface{} `json:"role"`
}

func (q *Queries) ListClient(ctx context.Context) ([]ListClientRow, error) {
	rows, err := q.db.Query(ctx, ListClient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListClientRow{}
	for rows.Next() {
		var i ListClientRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateClient = `-- name: UpdateClient :exec
UPDATE user_account SET 
	name = $2, 
    email = COALESCE(NULLIF(TRIM($3::varchar),''), email), 
	password = COALESCE(NULLIF(TRIM($4::varchar),''), password)
WHERE id = $1
`

type UpdateClientParams struct {
	ID      int32  `json:"id" validate:"required"`
	Name    string `json:"name" validate:"required"`
	Column3 string `json:"column_3"`
	Column4 string `json:"column_4"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, UpdateClient,
		arg.ID,
		arg.Name,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const UpdateRoleClient = `-- name: UpdateRoleClient :exec
WITH delete_role AS (
  DELETE FROM user_role
  WHERE id_user = $1 
)
INSERT INTO user_role (id_user, id_role)
SELECT $1, UNNEST($2::int[])
`

type UpdateRoleClientParams struct {
	IDUser  int32   `json:"id_user"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) UpdateRoleClient(ctx context.Context, arg UpdateRoleClientParams) error {
	_, err := q.db.Exec(ctx, UpdateRoleClient, arg.IDUser, arg.Column2)
	return err
}
