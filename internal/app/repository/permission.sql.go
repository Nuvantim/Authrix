// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: permission.sql

package repository

import (
	"context"
)

const CreatePermission = `-- name: CreatePermission :exec
INSERT INTO permission (name) VALUES ($1)
`

func (q *Queries) CreatePermission(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, CreatePermission, name)
	return err
}

const DeletePermission = `-- name: DeletePermission :exec
DELETE FROM permission WHERE id=$1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeletePermission, id)
	return err
}

const GetPermission = `-- name: GetPermission :one
SELECT id, name FROM permission WHERE id = $1
`

type GetPermissionRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetPermission(ctx context.Context, id int32) (GetPermissionRow, error) {
	row := q.db.QueryRow(ctx, GetPermission, id)
	var i GetPermissionRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const ListPermission = `-- name: ListPermission :many
SELECT id, name, created_at FROM permission
`

func (q *Queries) ListPermission(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, ListPermission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePermission = `-- name: UpdatePermission :exec
UPDATE permission SET name=$2 WHERE id=$1
`

type UpdatePermissionParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.Exec(ctx, UpdatePermission, arg.ID, arg.Name)
	return err
}

const VerifyPermission = `-- name: VerifyPermission :many
SELECT DISTINCT id FROM permission WHERE id = ANY($1:: int[])
`

func (q *Queries) VerifyPermission(ctx context.Context, dollar_1 []int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, VerifyPermission, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
