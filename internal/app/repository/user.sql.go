// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateProfile = `-- name: CreateProfile :exec
INSERT INTO user_profile (user_id) 
VALUES ($1)
`

func (q *Queries) CreateProfile(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, CreateProfile, userID)
	return err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO user_account(name,email,password) 
VALUES ($1,$2,$3) 
RETURNING id
`

type CreateUserParams struct {
	Name     string `json:"name" validate:"required"`
	Email    string `json:"email" validate:"required"`
	Password string `json:"password" validate:"required"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, CreateUser, arg.Name, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const DeleteAccount = `-- name: DeleteAccount :exec
DELETE FROM user_account WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteAccount, id)
	return err
}

const FindEmail = `-- name: FindEmail :one
SELECT id, email,password FROM user_account WHERE email = $1
`

type FindEmailRow struct {
	ID       int32  `json:"id" validate:"required"`
	Email    string `json:"email" validate:"required"`
	Password string `json:"password" validate:"required"`
}

func (q *Queries) FindEmail(ctx context.Context, email string) (FindEmailRow, error) {
	row := q.db.QueryRow(ctx, FindEmail, email)
	var i FindEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const GetProfile = `-- name: GetProfile :one
SELECT user_account.id, user_account.name, user_account.email, user_account.password, user_account.created_at, user_profile.id, user_profile.user_id, user_profile.age, user_profile.phone, user_profile.district, user_profile.city, user_profile.country, user_profile.created_at
FROM "public".user_account
INNER JOIN "public".user_profile ON (user_account.id = user_profile.user_id) WHERE user_account.id = $1 LIMIT 1
`

type GetProfileRow struct {
	UserAccount UserAccount `json:"user_account"`
	UserProfile UserProfile `json:"user_profile"`
}

func (q *Queries) GetProfile(ctx context.Context, id int32) (GetProfileRow, error) {
	row := q.db.QueryRow(ctx, GetProfile, id)
	var i GetProfileRow
	err := row.Scan(
		&i.UserAccount.ID,
		&i.UserAccount.Name,
		&i.UserAccount.Email,
		&i.UserAccount.Password,
		&i.UserAccount.CreatedAt,
		&i.UserProfile.ID,
		&i.UserProfile.UserID,
		&i.UserProfile.Age,
		&i.UserProfile.Phone,
		&i.UserProfile.District,
		&i.UserProfile.City,
		&i.UserProfile.Country,
		&i.UserProfile.CreatedAt,
	)
	return i, err
}

const ResetPassword = `-- name: ResetPassword :exec
UPDATE user_account SET password=$2 WHERE email=$1
`

type ResetPasswordParams struct {
	Email    string `json:"email" validate:"required"`
	Password string `json:"password" validate:"required"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.db.Exec(ctx, ResetPassword, arg.Email, arg.Password)
	return err
}

const UpdateAccount = `-- name: UpdateAccount :exec
WITH updated_account AS (
    UPDATE user_account SET name = $2 WHERE id= $1
)
UPDATE user_profile SET age = $3, phone = $4, district = $5, city = $6, country = $7
WHERE user_id = $1
`

type UpdateAccountParams struct {
	UserID   int32       `json:"user_id" validate:"required"`
	Name     string      `json:"name" validate:"required"`
	Age      pgtype.Int4 `json:"age" validate:"required"`
	Phone    pgtype.Int4 `json:"phone" validate:"required"`
	District pgtype.Text `json:"district" validate:"required"`
	City     pgtype.Text `json:"city" validate:"required"`
	Country  pgtype.Text `json:"country" validate:"required"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, UpdateAccount,
		arg.UserID,
		arg.Name,
		arg.Age,
		arg.Phone,
		arg.District,
		arg.City,
		arg.Country,
	)
	return err
}

const UpdatePassword = `-- name: UpdatePassword :exec
UPDATE user_account SET password=$2 WHERE id=$1
`

type UpdatePasswordParams struct {
	ID       int32  `json:"id" validate:"required"`
	Password string `json:"password" validate:"required"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, UpdatePassword, arg.ID, arg.Password)
	return err
}
