// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package repository

import (
	"context"
)

const AddPermissionRole = `-- name: AddPermissionRole :exec
INSERT INTO role_permission (id_role, id_permission) SELECT $1 AS role_id_params,
unnested_permission_id FROM UNNEST($2::int[]) AS unnested_permission_id
`

type AddPermissionRoleParams struct {
	IDRole  int32   `json:"id_role"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) AddPermissionRole(ctx context.Context, arg AddPermissionRoleParams) error {
	_, err := q.db.Exec(ctx, AddPermissionRole, arg.IDRole, arg.Column2)
	return err
}

const CreateRole = `-- name: CreateRole :one
INSERT INTO role (name) VALUES ($1) RETURNING id
`

func (q *Queries) CreateRole(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, CreateRole, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const DeletePermissionRole = `-- name: DeletePermissionRole :exec
DELETE FROM role_permission WHERE id_role = $1
`

func (q *Queries) DeletePermissionRole(ctx context.Context, idRole int32) error {
	_, err := q.db.Exec(ctx, DeletePermissionRole, idRole)
	return err
}

const DeleteRole = `-- name: DeleteRole :exec
DELETE FROM role WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteRole, id)
	return err
}

const GetPermissionRole = `-- name: GetPermissionRole :many
SELECT id,name FROM permission WHERE id IN (SELECT id_permission FROM role_permission WHERE id_role = $1)
`

type GetPermissionRoleRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetPermissionRole(ctx context.Context, idRole int32) ([]GetPermissionRoleRow, error) {
	rows, err := q.db.Query(ctx, GetPermissionRole, idRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPermissionRoleRow{}
	for rows.Next() {
		var i GetPermissionRoleRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRole = `-- name: GetRole :one
SELECT id,name FROM role WHERE id = $1
`

type GetRoleRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRole(ctx context.Context, id int32) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, GetRole, id)
	var i GetRoleRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const ListPermissionRole = `-- name: ListPermissionRole :many
SELECT
    CASE
        WHEN ROW_NUMBER() OVER (PARTITION BY r.id ORDER BY p.name) = 1 THEN r.name
        ELSE NULL
    END AS role_name,
    p.name AS permission_name,
    p.id AS permission_id
FROM
    "public"."role" AS r
JOIN
    "public".role_permission AS rp ON r.id = rp.id_role
JOIN
    "public".permission AS p ON rp.id_permission = p.id
WHERE
    r.id IN ($1::int[])
ORDER BY
    r.name, p.name
`

type ListPermissionRoleRow struct {
	RoleName       interface{} `json:"role_name"`
	PermissionName string      `json:"permission_name"`
	PermissionID   int32       `json:"permission_id"`
}

func (q *Queries) ListPermissionRole(ctx context.Context, dollar_1 []int32) ([]ListPermissionRoleRow, error) {
	rows, err := q.db.Query(ctx, ListPermissionRole, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPermissionRoleRow{}
	for rows.Next() {
		var i ListPermissionRoleRow
		if err := rows.Scan(&i.RoleName, &i.PermissionName, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListRole = `-- name: ListRole :many
SELECT
    r.id,
    r.name,
    ARRAY_AGG(p.name ORDER BY p.name) AS permissions
FROM
    public.role AS r
LEFT JOIN
    public.role_permission AS rp ON r.id = rp.id_role
LEFT JOIN
    public.permission AS p ON rp.id_permission = p.id
GROUP BY
    r.id, r.name
ORDER BY
    r.name
`

type ListRoleRow struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Permissions interface{} `json:"permissions"`
}

func (q *Queries) ListRole(ctx context.Context) ([]ListRoleRow, error) {
	rows, err := q.db.Query(ctx, ListRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRoleRow{}
	for rows.Next() {
		var i ListRoleRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePermissionRole = `-- name: UpdatePermissionRole :exec
WITH delete_permission AS (
  DELETE FROM role_permission
  WHERE id_role = $1
)
INSERT INTO role_permission (id_role, id_permission)
SELECT $1,UNNEST($2::int[])
`

type UpdatePermissionRoleParams struct {
	IDRole  int32   `json:"id_role"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) UpdatePermissionRole(ctx context.Context, arg UpdatePermissionRoleParams) error {
	_, err := q.db.Exec(ctx, UpdatePermissionRole, arg.IDRole, arg.Column2)
	return err
}

const UpdateRole = `-- name: UpdateRole :exec
UPDATE role SET name = $2 WHERE id = $1
`

type UpdateRoleParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, UpdateRole, arg.ID, arg.Name)
	return err
}

const VerifyRole = `-- name: VerifyRole :many
SELECT DISTINCT id FROM role WHERE id = ANY($1:: int[])
`

func (q *Queries) VerifyRole(ctx context.Context, dollar_1 []int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, VerifyRole, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
